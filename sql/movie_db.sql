/* This is a movie database from TMDB website. It is composed of the following tables and columns:
   CAST_CREDIT: ID, FILMID, PERSONID, CREDITID, CASTID, CHARACTER, GENDER, NAME_, ORDER_
   COLLECTION: ID, COLLECTIONID, NAME_
   COUNTRY: ID, COUNTRY, CODE
   CREW_CREDIT: ID, FILMID, CREDITID, DEPARTMENTID, PERSONID, JOBID, NAME
   DEPARTMENT: ID, DEPARTMENT
   GENRE: ID, GENREID, GENRE
   JOB: ID, DEPARTMENT, DEPARTMENTID, JOB
   MOVIE: ID, FILMID, TITLE, BUDGET, ORIGINAL_TITLE, OVERVIEW, POPULARITY, POSTER_PATH, RELEASE_DATE, REVENUE, RUNTIME, VOTE_AVERAGE, 
VOTE_COUNT, TAGLINE, COLLECTIONID
   MOVIE_COUNTRY: ID, FILMID, COUNTRYCODE
   MOVIE_GENRE: ID, FILMID, GENREID
   PERSON: ID, PERSONID, NAME_, DEPARTMENTID, BIRTHDAY, ALSO_KNOWN_AS, DEATHDAY, GENDER, BIOGRAPHY, POPULARITY, PLACE_OF_BIRTH, 
COUNTRYCODE, COUNTRY */


-- The name with year, release date, country, duration, rating, tagline, overview, genres and crew of a film in one line.
SELECT M.TITLE + '(' + CONVERT(VARCHAR,YEAR(RELEASE_DATE))+')' TITLE, M.RELEASE_DATE, MC.COUNTRYCODE, 
CONVERT(VARCHAR, M.RUNTIME/60)+'h ' + CONVERT(VARCHAR,M.RUNTIME%60)+'m ' DURATION, M.VOTE_AVERAGE*10 VOTE_AVG, 
M.TAGLINE, M.OVERVIEW, M.POSTER_PATH,
(SELECT GENRE+', ' FROM MOVIE_GENRE MG
JOIN GENRE G ON G.GENREID = MG.GENREID
WHERE MG.FILMID = M.FILMID
FOR XML PATH ('')) GENRES,
(SELECT (P.NAME_+ ' ('+J.JOB+')')+', ' FROM CREW_CREDIT CRC 
JOIN DEPARTMENT D ON D.ID = CRC.DEPARTMENTID
JOIN JOB J ON J.ID = CRC.JOBID
JOIN PERSON P ON P.PERSONID = CRC.PERSONID
WHERE CRC.FILMID = M.FILMID AND J.JOB IN ('Director', 'Screenplay')
FOR XML PATH ('')
) CREW
FROM MOVIE M
JOIN MOVIE_COUNTRY MC ON MC.FILMID = M.FILMID
WHERE M.FILMID = 497 

-- The data of an actress that appear in TMDB webpage
SELECT P.NAME_, P.DEPARTMENT KNOWN_FOR, 
CASE WHEN P.GENDER = 1 THEN 'FEMALE'
WHEN P.GENDER=2 THEN 'MALE'
END GENDER,
P.BIRTHDAY, (DATEDIFF(DAY, P.BIRTHDAY, GETDATE())/365) AGE, 
P.PLACE_OF_BIRTH, P.ALSO_KNOWN_AS,
(SELECT COUNT(*) FROM CAST_CREDIT WHERE PERSONID = P.PERSONID) CAST_CREDIT_COUNT,
(SELECT COUNT(*) FROM CAST_CREDIT WHERE PERSONID = P.PERSONID) CREW_CREDIT_COUNT,
P.PROFILE_PATH, P.POPULARITY
FROM PERSON P 
WHERE P.PERSONID = 5064

SELECT 'Acting' TYPE_, YEAR(M.RELEASE_DATE), M.TITLE, CC.CHARACTER_ 
FROM CAST_CREDIT CC 
JOIN PERSON P ON P.PERSONID = CC.PERSONID
JOIN MOVIE M ON M.FILMID = CC.FILMID
WHERE CC.PERSONID = 5064
ORDER BY M.RELEASE_DATE DESC 

SELECT YEAR(M.RELEASE_DATE), M.TITLE, D.DEPARTMENT, J.JOB 
FROM CREW_CREDIT CRC 
JOIN PERSON P ON P.PERSONID = CRC.PERSONID
JOIN MOVIE M ON M.FILMID = CRC.FILMID
JOIN DEPARTMENT D ON D.ID = CRC.DEPARTMENTID
JOIN JOB J ON J.ID = CRC.JOBID
WHERE CRC.PERSONID = 5064
ORDER BY M.RELEASE_DATE DESC 

SELECT TOP 10 YEAR(M.RELEASE_DATE), M.TITLE, CC.CHARACTER_, M.POPULARITY
FROM CAST_CREDIT CC 
JOIN PERSON P ON P.PERSONID = CC.PERSONID
JOIN MOVIE M ON M.FILMID = CC.FILMID
WHERE CC.PERSONID = 5064
ORDER BY M.POPULARITY DESC 

-- Number of films, total and average budget and revenue of each film series 
SELECT C.NAME_ SERIES_NAME, COUNT(M.TITLE) FILM_COUNT, SUM(M.BUDGET) TOTAL_BUDGET, ROUND(AVG(M.BUDGET),0) AVG_BUDGET, 
SUM(M.REVENUE) TOTAL_REVENUE, ROUND(AVG(M.REVENUE),0) AVG_REVENUE FROM MOVIE M
JOIN COLLECTION_ C ON C.COLLECTIONID = M.COLLECTIONID
GROUP BY C.NAME_
ORDER BY 3 DESC

-- The films with lowest and highest budget and revenue of the film series
SELECT C.NAME_ SERIES_NAME,
(SELECT COUNT(*) FROM MOVIE WHERE COLLECTIONID = C.COLLECTIONID) FILM_COUNT,
(SELECT SUM(BUDGET) FROM MOVIE WHERE COLLECTIONID = C.COLLECTIONID) TOTAL_BUDGET,
(SELECT SUM(REVENUE) FROM MOVIE WHERE COLLECTIONID = C.COLLECTIONID) TOTAL_REVENUE,
(SELECT TOP 1 TRIM(STR(YEAR(RELEASE_DATE))) + '-' + TITLE + ',' + STR(BUDGET) FROM MOVIE WHERE COLLECTIONID = C.COLLECTIONID ORDER BY BUDGET DESC) MAX_BUDGET,
(SELECT TOP 1 TRIM(STR(YEAR(RELEASE_DATE))) + '-' + TITLE + ',' + STR(BUDGET) FROM MOVIE WHERE COLLECTIONID = C.COLLECTIONID ORDER BY BUDGET) MIN_BUDGET,
(SELECT TOP 1 TRIM(STR(YEAR(RELEASE_DATE))) + '-' + TITLE + ',' + STR(REVENUE) FROM MOVIE WHERE COLLECTIONID = C.COLLECTIONID ORDER BY REVENUE DESC) MAX_REVENUE,
(SELECT TOP 1 TRIM(STR(YEAR(RELEASE_DATE))) + '-' + TITLE + ',' + STR(REVENUE) FROM MOVIE WHERE COLLECTIONID = C.COLLECTIONID ORDER BY REVENUE) MIN_REVENUE
FROM COLLECTION_ C

-- The jobs and number of films David Lynch has worked in
SELECT CRC.NAME, D.DEPARTMENT, J.JOB, COUNT(FILMID) FILMCOUNT FROM CREW_CREDIT CRC
JOIN DEPARTMENT D ON D.ID = CRC.DEPARTMENTID
JOIN JOB J ON J.ID = CRC.JOBID
WHERE PERSONID = 5602
GROUP BY CRC.NAME, D.DEPARTMENT, J.JOB
ORDER BY D.DEPARTMENT, J.JOB

-- The number of films produced by each country
SELECT C.CODE, C.COUNTRY, COUNT(MC.FILMID) FILMCOUNT FROM COUNTRY C
JOIN MOVIE_COUNTRY MC ON MC.COUNTRYCODE = C.CODE
GROUP BY C.CODE, C.COUNTRY
ORDER BY FILMCOUNT DESC

-- The films that both US and Japan produced
SELECT C.CODE, C.COUNTRY, M.TITLE, M.ORIGINAL_TITLE FROM MOVIE_COUNTRY MC
JOIN MOVIE M ON M.FILMID = MC.FILMID
JOIN COUNTRY C ON C.CODE = MC.COUNTRYCODE
WHERE C.CODE = 'US' AND M.FILMID IN (SELECT FILMID FROM MOVIE_COUNTRY WHERE COUNTRYCODE = 'JP')

-- Top 5 popular films of each category
SELECT GN.GENRE, CONVERT(VARCHAR, MV.ROWNR) + '.'+ MV.TITLE, MV.POPULARITY FROM GENRE GN
CROSS APPLY 
(SELECT TOP 5 ROW_NUMBER() OVER (ORDER BY POPULARITY DESC) ROWNR,  M.TITLE, M.FILMID, G.GENREID, G.GENRE, M.POPULARITY FROM MOVIE_GENRE MG
JOIN GENRE G ON	G.GENREID = MG.GENREID
JOIN MOVIE M ON M.FILMID = MG.FILMID
WHERE G.GENREID = GN.GENREID
ORDER BY M.POPULARITY DESC) MV

SELECT * FROM MOVIE WHERE TITLE = 'The Green Mile'
SELECT * FROM PERSON WHERE NAME_ LIKE '%Streep'
SELECT * FROM CREW_CREDIT WHERE NAME LIKE 'David Lynch'
SELECT * FROM CAST_CREDIT WHERE PERSONID = 5064
SELECT * FROM DEPARTMENT
SELECT * FROM  JOB where JOB = 'Director'
SELECT * FROM MOVIE_COUNTRY